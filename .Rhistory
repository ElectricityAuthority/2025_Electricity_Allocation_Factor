library(dplyr)
install.packages(tidyverse)
install.packages('tidyverse')
library(dplyr)
df <- read.csv(r('C:\Users\nguyent\AppData\Local\Temp\MicrosoftEdgeDownloads\aa8f4164-7fa9-47dc-a170-980c3380d84c\2021_OTA2201.csv.Z'))
df <- read.csv(r'(C:\Users\nguyent\AppData\Local\Temp\MicrosoftEdgeDownloads\aa8f4164-7fa9-47dc-a170-980c3380d84c\2021_OTA2201.csv.Z)')
df <- read.csv(r'(C:\Users\nguyent\AppData\Local\Temp\MicrosoftEdgeDownloads\aa8f4164-7fa9-47dc-a170-980c3380d84c\2021_OTA2201.csv.Z)', header = F)
library(R.utils)
install.packages("R.utils")
library(R.utils)
compressed_file <-r'(C:\Users\nguyent\AppData\Local\Temp\MicrosoftEdgeDownloads\aa8f4164-7fa9-47dc-a170-980c3380d84c\2021_OTA2201.csv.Z)'
decompressed_file <- gunzip(compressed_file, remove = FALSE, overwrite = TRUE)
# Read the CSV data into a data frame
data <- read.csv(decompressed_file)
decompressed_file <- gunzip(compressed_file, remove = FALSE, overwrite = TRUE)
compressed_file <- r'("C:\Users\nguyent\Downloads\2021_OTA2201.csv.Z")'
compressed_file <- r'(C:\Users\nguyent\Downloads\2021_OTA2201.csv.Z)'
decompressed_file <- gunzip(compressed_file, remove = FALSE, overwrite = TRUE)
decompressed_file <- gunzip(compressed_file, dest = r'(C:\Users\nguyent\Downloads\2021_OTA2201.csv)', remove = FALSE, overwrite = TRUE)
decompressed_file <- gunzip(compressed_file, destname = r'(C:\Users\nguyent\Downloads\2021_OTA2201.csv)', remove = FALSE, overwrite = TRUE)
data <- read.csv(decompressed_file)
decompressed_file <- gzip(compressed_file, destname = r'(C:\Users\nguyent\Downloads\2021_OTA2201.csv)', remove = FALSE, overwrite = TRUE)
library(dplyr)
library(tidyr)
folderPath <- r"(C:\vSPD\Output\CLUMESSAGE\)"
filename <- "MSS_201012023032010531_0X.SPDSOLVED"
df <- read.csv(paste0(folderPath,filename), colClasses = "character")
df <- df[, -(1:4)]
df <- separate(df, CLUMESSAGE_1, into = c("RUNDATETIME", "MESSAGE"), sep = "\\|")
df1 <- df %>% filter(grepl("^SPDSolve|^PostProc", CLUMETHOD))
df2 <- df %>% filter(grepl("^\\*\\*\\*\\*Solve Loop|^Objective", MESSAGE))
View(df2)
source("C:/vSPD/Read_CLUMESSAGE.R")
View(df2)
View(df1)
source("C:/vSPD/Read_CLUMESSAGE.R")
View(df1)
source("C:/vSPD/Read_CLUMESSAGE.R")
source("C:/vSPD/Read_CLUMESSAGE.R")
View(df2)
View(df2)
View(df1)
source("C:/vSPD/Read_CLUMESSAGE.R")
View(df1)
View(df2)
View(df1)
source("C:/vSPD/Read_CLUMESSAGE.R")
View(df2)
source("C:/vSPD/Read_CLUMESSAGE.R")
View(df2)
source("C:/vSPD/Read_CLUMESSAGE.R")
View(df)
source("C:/vSPD/Read_CLUMESSAGE.R")
View(df1)
source("C:/vSPD/Read_CLUMESSAGE.R")
source("C:/vSPD/Read_CLUMESSAGE.R")
source("C:/vSPD/Read_CLUMESSAGE.R")
source("C:/vSPD/Read_CLUMESSAGE.R")
View(df2)
source("C:/vSPD/Read_CLUMESSAGE.R")
source("C:/vSPD/Read_CLUMESSAGE.R")
source("C:/vSPD/Read_CLUMESSAGE.R")
View(df1)
View(df2)
source("C:/vSPD/Read_CLUMESSAGE.R")
source("C:/Users/nguyent/OneDrive - Electricity Authority/R codes/Read_pivotal_data.R")
View(DF)
rm(list = ls())
source("C:/Users/nguyent/OneDrive - Electricity Authority/R codes/Read_pivotal_data.R")
View(df)
basename(f)
basename(f)=='pivot_MW_2019.csv'
source("C:/Users/nguyent/OneDrive - Electricity Authority/R codes/Read_pivotal_data.R")
folder_path <- r"(C:\Users\nguyent\OneDrive - Electricity Authority\Simulations\Pivotal\vSPDPivotNodePrice)"
file_list <- list.files(path = folder_path, pattern = "*.csv", full.names = TRUE)
DF <- NULL
for (f in file_list) {
if (is.null(DF)) {
DF<- read.csv(f,header = T) %>% filter(Node %in% c('HAY2201','BEN2201'))
} else {
DF<- read.csv(f,header = T) %>% filter(Node %in% c('HAY2201','BEN2201')) %>% rbind(DF)
}
}
NodePrices <- DF %>% filter(Scenario == "CTCT_NZ") %>%
mutate(TradingDate = as.Date(substr(DateTime,1,11),format = '%d-%b-%Y')) %>%
filter(TradingDate >= as.Date('2019-11-01')) %>%
arrange(TradingDate)
DF <- NULL
View(IslandResults)
NodePrices <- NodePrices %>% mutate(Island = ifelse(Node=='BEN2201','SI','NI'))
PivotResults <- IslandResults %>%
merge(NodePrices,by = c('TradingDate','DateTime','Scenario','Island'),all = T) %>%
select(Scenario,TradingDate,DateTime,Island,TraderGenMW,TraderMinMW,TraderPivotMW,Price)
View(PivotResults)
df <- PivotResults %>% group_by(TradingDate) %>% summarise(n = count())%>% ungroup()
df <- PivotResults %>% group_by(TradingDate) %>% summarise(n = count(TradingDate))%>% ungroup()
df <- PivotResults %>% group_by(TradingDate) %>% summarise(n = n())%>% ungroup()
View(df)
load(r'(C:\Users\nguyent\OneDrive - Electricity Authority\Simulations\Pivotal\vSPDPivot_2020.RData)')
View(islandpivot)
source("C:/Users/nguyent/OneDrive - Electricity Authority/R codes/Read_pivotal_data.R")
source("C:/Users/nguyent/OneDrive - Electricity Authority/R codes/Read_pivotal_data.R")
View(PivotResults)
final_pivot <- PivotResults %>% filter(price >= 25000)
final_pivot <- PivotResults %>% filter(Price >= 25000)
View(final_pivot)
final_pivot <- PivotResults %>% filter(Price >= 25000) %>%
group_by(Scenario,TradingDate,DateTime) %>%
summarise(TraderGenMW = sum(TraderGenMW),TraderMinMW = sum(TraderMinMW),
TraderPivotMW = sum(TraderPivotMW),Price = max(Price)) %>%
ungroup()
View(final_pivot)
getwd()
write.csv(final_pivot, 'final_pivot.csv', row.names = F)
rm(nodeprice,nodeprice_2019,nodeprice_2020)
rm(islandpivot,islandpivot_2019,islandpivot_2020)
ls(pattern = 'islandpivot*')
ls(pattern = 'Island*')
gc()
gc()
source("C:/Users/nguyent/OneDrive - Electricity Authority/Simulations/Pivotal/net_pivotal_calculation_review.R")
View(spd_gen_node)
scenario <- "Merged_norun"
spd_file <- paste0("vSPD_3.1.0/Output/",scenario,"/",scenario,"_NodeResults_TP.csv")
spd_nodes <- read.csv(spd_file, header = T) %>%
rename(Generation = `Generation..MW.`, Price = `Price....MWh.`)
spd_prices <- select(spd_nodes, DateTime, Node, Price) %>%
filter(Node %in% (PricingNode$Node))
spd_generation <- select(spd_nodes, DateTime, Node, Generation, Price) %>%
merge(spd_gen_node, by = 'Node')
# Calculate SPD generation revenue
spd_gen_revenue <- spd_generation %>%
group_by(DateTime) %>% summarise(SPD_Revenue = sum(Generation * Price)) %>%
ungroup()
# Calculate Reconciled generation revenue
gr010_gen_revenue <- gr010_generation %>%
merge(spd_prices, by.x = c('Interval','Node'),
by.y = c('DateTime','Node')) %>%
group_by(Interval) %>% summarise(GR010_Revenue = sum(MW * Price)) %>%
ungroup()
# Calulate Reconciled load cost
gr010_load_cost <- gr010_demand %>%
merge(spd_prices, by.x = c('Interval','Node'),
by.y = c('DateTime','Node')) %>%
group_by(Interval) %>% summarise(GR010_Cost = sum(MW * Price)) %>%
ungroup()
# Calculate FTR contract revenue
ftr_revenue <- ftrcontracts %>%
merge(spd_prices, by.x = c('Interval','SourceNode'),
by.y = c('DateTime','Node')) %>% rename(SourcePrice = Price) %>%
merge(spd_prices, by.x = c('Interval','SinkNode'),
by.y = c('DateTime','Node')) %>% rename(SinkPrice = Price) %>%
mutate(FTR_Revenue = FTR_MW * (SinkPrice - SourcePrice)) %>%
mutate(FTR_Revenue = ifelse( ContractType == "Option" & FTR_Revenue < 0 ,0, FTR_Revenue)) %>%
group_by(Interval) %>% summarise(FTR_Revenue = sum(FTR_Revenue)) %>%
ungroup()
# Calculate Hedge contract Revenue
hedge_revenue <- hedgecontracts %>%
merge(spd_prices, by.x = c('Interval','Node'),
by.y = c('DateTime','Node')) %>%
group_by(Interval) %>% summarise(Hedge_Revenue = sum(Price * Hedge_MW)) %>%
ungroup()
# Get gross pivotal data
spd_file <- paste0("vSPD_3.1.0/Output/",scenario,"/",scenario,"_IslandResults_TP.csv")
spd_islands <- read.csv(spd_file, header = T) %>%
group_by(Interval = DateTime, Island) %>%
summarise(RefPrice = max(`ReferencePrice....MWh.`)) %>%  ungroup %>%
spread(key = Island, value = RefPrice) %>%
rename(NI_Ref_Price = NI, SI_Ref_Price = SI)
# Get net pivotal data
net_profit <- gr010_load_cost %>%
merge(gr010_gen_revenue, by = 'Interval') %>%
merge(spd_gen_revenue, by.x = 'Interval', by.y = "DateTime") %>%
merge(ftr_revenue, by = 'Interval') %>%
merge(hedge_revenue, by = 'Interval') %>%
mutate(net_profit = GR010_Revenue + SPD_Revenue + FTR_Revenue + Hedge_Revenue - GR010_Cost) %>%
merge(spd_islands, by = 'Interval') %>%
arrange(desc(net_profit))
# Get total generation
pivot_MW <- spd_generation %>% distinct() %>%
filter(!(Node %in% c('HWB0331 MAH0','LTN0331 TWF0','TWC2201 TWF0'))) %>%
group_by(Interval = DateTime, Node, Trader) %>%
summarise(Generation = max(Generation)) %>%
group_by(Interval) %>% summarise(Generation = sum(Generation)) %>% ungroup()
net_pivotal <- PeriodInterval %>% merge(net_profit,by = 'Interval') %>%
merge(pivot_MW, by = 'Interval')
write.csv(net_pivotal, file = paste0(scenario,"_net_pivotal2.csv"),row.names = F)
scenario <- "CTCT_mustrun"
spd_file <- paste0("vSPD_3.1.0/Output/",scenario,"/",scenario,"_NodeResults_TP.csv")
spd_nodes <- read.csv(spd_file, header = T) %>%
rename(Generation = `Generation..MW.`, Price = `Price....MWh.`)
df <- spd_nodes %>% filter(DateTime == '01-JUL-2022 15:30')
View(df)
df <- spd_nodes %>% filter(DateTime == '13-JAN-2020 07:30')
df <- spd_nodes %>% filter(DateTime == '10-AUG-2021 07:30')
df <- spd_nodes %>% filter(DateTime == '06-SEP-2022 08:00')
View(spd_gr010_mapping)
View(spd_gen_node)
scenario <- "CTCT_mustrun"
View(spd_gen_node)
scenario <- "CTCT_mustrun"
if (T) {
spd_file <- paste0("vSPD_3.1.0/Output/",scenario,"/",scenario,"_NodeResults_TP.csv")
spd_nodes <- read.csv(spd_file, header = T) %>%
rename(Generation = `Generation..MW.`, Price = `Price....MWh.`)
spd_prices <- select(spd_nodes, DateTime, Node, Price) %>%
filter(Node %in% (PricingNode$Node))
spd_generation <- select(spd_nodes, DateTime, Node, Generation, Price) %>%
merge(spd_gen_node, by = 'Node')
# Calculate SPD generation revenue
spd_gen_revenue <- spd_generation %>% filter(Trader=='CTCT') %>%
group_by(DateTime) %>% summarise(SPD_Revenue = sum(Generation * Price)) %>%
ungroup()
# Calculate Reconciled generation revenue
gr010_gen_revenue <- gr010_generation %>% filter(Trader=='CTCT') %>%
merge(spd_prices, by.x = c('Interval','Node'),
by.y = c('DateTime','Node')) %>%
group_by(Interval) %>% summarise(GR010_Revenue = sum(MW * Price)) %>%
ungroup()
# Calulate Reconciled load cost
gr010_load_cost <- gr010_demand %>% filter(Trader=='CTCT') %>%
merge(spd_prices, by.x = c('Interval','Node'),
by.y = c('DateTime','Node')) %>%
group_by(Interval) %>% summarise(GR010_Cost = sum(MW * Price)) %>%
ungroup()
# Calculate FTR contract revenue
ftr_revenue <- ftrcontracts %>% filter(Trader=='CTCT') %>%
merge(spd_prices, by.x = c('Interval','SourceNode'),
by.y = c('DateTime','Node')) %>% rename(SourcePrice = Price) %>%
merge(spd_prices, by.x = c('Interval','SinkNode'),
by.y = c('DateTime','Node')) %>% rename(SinkPrice = Price) %>%
mutate(FTR_Revenue = FTR_MW * (SinkPrice - SourcePrice)) %>%
mutate(FTR_Revenue = ifelse( ContractType == "Option" & FTR_Revenue < 0 ,0, FTR_Revenue)) %>%
group_by(Interval) %>% summarise(FTR_Revenue = sum(FTR_Revenue)) %>%
ungroup()
# Calculate Hedge contract Revenue
hedge_revenue <- hedgecontracts %>% filter(Trader=='CTCT') %>%
merge(spd_prices, by.x = c('Interval','Node'),
by.y = c('DateTime','Node')) %>%
group_by(Interval) %>% summarise(Hedge_Revenue = sum(Price * Hedge_MW)) %>%
ungroup()
# Get gross pivotal data
spd_file <- paste0("vSPD_3.1.0/Output/",scenario,"/",scenario,"_IslandResults_TP.csv")
spd_islands <- read.csv(spd_file, header = T) %>%
group_by(Interval = DateTime, Island) %>%
summarise(RefPrice = max(`ReferencePrice....MWh.`)) %>%  ungroup %>%
spread(key = Island, value = RefPrice) %>%
rename(NI_Ref_Price = NI, SI_Ref_Price = SI)
# Get net pivotal data
net_profit <- gr010_load_cost %>%
merge(gr010_gen_revenue, by = 'Interval') %>%
merge(spd_gen_revenue, by.x = 'Interval', by.y = "DateTime") %>%
merge(ftr_revenue, by = 'Interval') %>%
merge(hedge_revenue, by = 'Interval') %>%
mutate(net_profit = GR010_Revenue + SPD_Revenue + FTR_Revenue + Hedge_Revenue - GR010_Cost) %>%
merge(spd_islands, by = 'Interval') %>%
arrange(desc(net_profit))
# Get total generation
pivot_MW <- spd_generation %>% filter(Trader=='CTCT') %>%
filter(MustRun==0) %>% distinct() %>%
filter(!(Node %in% c('ROX2201 ROX0','TWH0331 TRC1'))) %>%
group_by(Interval = DateTime, Node, Trader) %>%
summarise(Generation = max(Generation)) %>%
group_by(Interval) %>% summarise(Generation = sum(Generation)) %>% ungroup()
net_pivotal <- PeriodInterval %>% merge(net_profit,by = 'Interval') %>%
merge(pivot_MW, by = 'Interval')
write.csv(net_pivotal, file = paste0(scenario,"_net_pivotal.csv"),row.names = F)
}
rm(list = ls()[ls() %in% temp_df_list])
gc()
source("C:/Users/nguyent/OneDrive - Electricity Authority/Simulations/EAF_2024/Get_Generation_Volume.R")
getwd()
df_base <- offer_base %>%
mutate(GenerationType = ifelse(Offer %in% thermal_nodes$PointOfConnectionCode, "Thermal", "Hydro")) %>%
group_by(TradingDate,TradingPeriod,CaseID,GenerationType) %>%
summarise(Generation = sum(Generation)) %>%
merge(casepublishtime,by = c("TradingDate","TradingPeriod","CaseID"),all.x = T) %>%
group_by(GenerationType) %>%
summarise(Generation_GWh = sum(Generation*InterimTimeWeightSeconds)/3600000) %>%
ungroup()
df_sce1 <- offer_sce1 %>%
mutate(GenerationType = ifelse(Offer %in% thermal_nodes$PointOfConnectionCode, "Thermal", "Hydro")) %>%
group_by(TradingDate,TradingPeriod,CaseID,GenerationType) %>%
summarise(Generation = sum(Generation)) %>%
merge(casepublishtime,by = c("TradingDate","TradingPeriod","CaseID"),all.x = T) %>%
group_by(GenerationType) %>%
summarise(Generation_GWh = sum(Generation*InterimTimeWeightSeconds)/3600000) %>%
ungroup()
df_sce2 <- offer_sce2 %>%
mutate(GenerationType = ifelse(Offer %in% thermal_nodes$PointOfConnectionCode, "Thermal", "Hydro")) %>%
group_by(TradingDate,TradingPeriod,CaseID,GenerationType) %>%
summarise(Generation = sum(Generation)) %>%
merge(casepublishtime,by = c("TradingDate","TradingPeriod","CaseID"),all.x = T) %>%
group_by(GenerationType) %>%
summarise(Generation_GWh = sum(Generation*InterimTimeWeightSeconds)/3600000) %>%
ungroup()
casepublishtime <- read.csv('casepublishtime.csv')
df_base <- offer_base %>%
mutate(GenerationType = ifelse(Offer %in% thermal_nodes$PointOfConnectionCode, "Thermal", "Hydro")) %>%
group_by(TradingDate,TradingPeriod,CaseID,GenerationType) %>%
summarise(Generation = sum(Generation)) %>%
merge(casepublishtime,by = c("TradingDate","TradingPeriod","CaseID"),all.x = T) %>%
group_by(GenerationType) %>%
summarise(Generation_GWh = sum(Generation*InterimTimeWeightSeconds)/3600000) %>%
ungroup()
df_sce1 <- offer_sce1 %>%
mutate(GenerationType = ifelse(Offer %in% thermal_nodes$PointOfConnectionCode, "Thermal", "Hydro")) %>%
group_by(TradingDate,TradingPeriod,CaseID,GenerationType) %>%
summarise(Generation = sum(Generation)) %>%
merge(casepublishtime,by = c("TradingDate","TradingPeriod","CaseID"),all.x = T) %>%
group_by(GenerationType) %>%
summarise(Generation_GWh = sum(Generation*InterimTimeWeightSeconds)/3600000) %>%
ungroup()
df_sce2 <- offer_sce2 %>%
mutate(GenerationType = ifelse(Offer %in% thermal_nodes$PointOfConnectionCode, "Thermal", "Hydro")) %>%
group_by(TradingDate,TradingPeriod,CaseID,GenerationType) %>%
summarise(Generation = sum(Generation)) %>%
merge(casepublishtime,by = c("TradingDate","TradingPeriod","CaseID"),all.x = T) %>%
group_by(GenerationType) %>%
summarise(Generation_GWh = sum(Generation*InterimTimeWeightSeconds)/3600000) %>%
ungroup()
View(df_base)
View(df_sce2)
View(df_sce1)
View(df_base)
View(df_sce2)
View(df_base)
View(df_sce2)
View(df_base)
View(df_sce2)
View(df_base)
View(df_sce2)
View(df_base)
View(df_sce2)
View(df_sce1)
View(df_base)
View(df_sce1)
View(df_sce2)
View(df_sce1)
View(df_base)
View(df_base)
View(df_sce1)
View(df_sce2)
View(hydro_nodes)
View(offer_base)
months <- format(seq(as.Date("2023-07-01"), as.Date("2024-06-01"), by="month"),"%Y%m")
# getwd()m <- months[1]
for (m in months){
offer_path <- paste0("vSPD_5.0.2/Output/Done/Basecase_", m ,"/Basecase_",m,"_OfferResults_TP.csv")
df_base <- read.csv(offer_path) %>%
filter(Offer %in% c(thermal_nodes$PointOfConnectionCode,hydro_nodes$PointOfConnectionCode)) %>%
separate(DateTime, into = c("TradingDate","TradingTime"), sep = " ") %>%
mutate(TradingDate = as.Date(TradingDate,'%d-%b-%Y')) %>%
mutate(TradingPeriod = gsub(x=Period,pattern="TP",replacement="")) %>%
mutate(TradingPeriod = as.integer(TradingPeriod)) %>%
mutate(Generation = as.numeric(`Generation..MW.`)) %>%
transmute(TradingDate,TradingPeriod,CaseID,Offer,Generation)
if (exists("offer_base")) {
offer_base <- rbind(offer_base,df_base)
} else {
offer_base <- df_base
}
offer_path <- paste0("vSPD_5.0.2/Output/Done/Scenario1_", m ,"/Scenario1_",m,"_OfferResults_TP.csv")
df_sce1 <- read.csv(offer_path) %>%
filter(Offer %in% c(thermal_nodes$PointOfConnectionCode,hydro_nodes$PointOfConnectionCode)) %>%
separate(DateTime, into = c("TradingDate","TradingTime"), sep = " ") %>%
mutate(TradingDate = as.Date(TradingDate,'%d-%b-%Y')) %>%
mutate(TradingPeriod = gsub(x=Period,pattern="TP",replacement="")) %>%
mutate(TradingPeriod = as.integer(TradingPeriod)) %>%
mutate(Generation = as.numeric(`Generation..MW.`)) %>%
transmute(TradingDate,TradingPeriod,CaseID,Offer,Generation)
if (exists("offer_sce1")) {
offer_sce1 <- rbind(offer_sce1,df_sce1)
} else {
offer_sce1 <- df_sce1
}
offer_path <- paste0("vSPD_5.0.2/Output/Done/Scenario2_", m ,"/Scenario2_",m,"_OfferResults_TP.csv")
df_sce2 <- read.csv(offer_path) %>%
filter(Offer %in% c(thermal_nodes$PointOfConnectionCode,hydro_nodes$PointOfConnectionCode)) %>%
separate(DateTime, into = c("TradingDate","TradingTime"), sep = " ") %>%
mutate(TradingDate = as.Date(TradingDate,'%d-%b-%Y')) %>%
mutate(TradingPeriod = gsub(x=Period,pattern="TP",replacement="")) %>%
mutate(TradingPeriod = as.integer(TradingPeriod)) %>%
mutate(Generation = as.numeric(`Generation..MW.`)) %>%
transmute(TradingDate,TradingPeriod,CaseID,Offer,Generation)
if (exists("offer_sce2")) {
offer_sce2 <- rbind(offer_sce2,df_sce2)
} else {
offer_sce2 <- df_sce2
}
}
gc()
rm(list = ls())
gc()
gc()
source("C:/Users/nguyent/OneDrive - Electricity Authority/Simulations/EAF_2024/Get_Generation_Volume.R")
library(dplyr)
library(dplyr)
library(tidyr)
library(here)
library(dplyr)
library(tidyr)
library(dplyr)
library(RSQLite,lib.loc = "C:/R_package")
library(sqldf)
library(lubridate)
library(tidyr)
library(here)
library(lubridate)
source("C:/Users/nguyent/OneDrive - Electricity Authority/Simulations/EAF_2024/Caluclate_EAF_2023_2024.R")
df_base_HAY <- df_base %>% filter(Node = 'HAY2201')
df_base_HAY <- df_base %>% filter(Node == 'HAY2201')
df_base_HAY <- price_base %>% filter(Node == 'HAY2201')
df_base_HAY <- price_base %>% filter(Node == 'OTA2201')
df_base_HAY <- price_base %>% filter(Node == 'HAY0331')
df_sce1_HAY <- price_sce1 %>% filter(Node == 'HAY0331')
df_sce2_HAY <- price_sce2 %>% filter(Node == 'HAY0331')
View(df_base_HAY)
df_base_HAY <- price_base %>% filter(Node == 'OTA2201') %>% rename(Price = Base_price)
df_base_HAY <- price_base %>% filter(Node == 'OTA2201') %>% rename(Base_price = Price)
df_base_HAY <- price_base %>% filter(Node == 'OTA2201') %>% rename('Base_price' = 'Price')
df_base_HAY <- price_base %>% filter(Node == 'OTA2201')
View(df_base_HAY)
df_base_HAY <- price_base %>% filter(Node == 'OTA2201')
View(price_base)
df_base_HAY <- price_base %>% filter(Node == 'HAY0331') %>% rename('Base_price' = 'Price')
df_sce1_HAY <- price_sce1 %>% filter(Node == 'HAY0331') %>% rename('Sce1_price' = 'Price')
df_sce2_HAY <- price_sce2 %>% filter(Node == 'HAY0331') %>% rename('Sce2_price' = 'Price')
df_sce1 <- df_base_HAY %>% merge(df_sce1_HAY, on = ['TradingDate','TradingTime','TradingPeriod','Node'])
df_sce1 <- df_base_HAY %>% merge(df_sce1_HAY, on = ('TradingDate','TradingTime','TradingPeriod','Node'))
df_sce1 <- df_base_HAY %>% merge(df_sce1_HAY, on = ['TradingDate','TradingTime','TradingPeriod','Node'])
df_sce1 <- df_base_HAY %>% merge(df_sce1_HAY, on = c('TradingDate','TradingTime','TradingPeriod','Node'))
View(df_sce1)
df_sce2 <- df_base_HAY %>% merge(df_sce2_HAY, on = c('TradingDate','TradingTime','TradingPeriod','Node'))
df_sce1 <- df_sce1 %>% mutate(Flag = ifelse(Base_price < Sce1_price, 1, 0))
df_sce1 <- df_sce1 %>% mutate(Flag = ifelse(Base_price > Sce1_price, 1, 0))
df_sce2 <- df_sce2 %>% mutate(Flag = ifelse(Base_price > Sce2_price, 1, 0))
sum(df_sce1$Flag)
sum(df_sce1$Flag,na.rm = T)
sum(df_sce2$Flag,na.rm = T)
View(df_sce2)
17568 - 16806
df_sce1_sce2 <- df_base_sce1 %>% merge(df_sce2_HAY, on = c('TradingDate','TradingTime','TradingPeriod','Node')) %>% mutate(Flag = ifelse(Sce2_price < Sce2_price, 1, 0))
df_sce1_sce2 <- df_sce1_HAY %>% merge(df_sce2_HAY, on = c('TradingDate','TradingTime','TradingPeriod','Node')) %>% mutate(Flag = ifelse(Sce2_price < Sce2_price, 1, 0))
sum(df_sce1_sce2$Flag,na.rm = T)
View(df_sce1_sce2)
df_sce1_sce2 <- df_sce1_HAY %>% merge(df_sce2_HAY, on = c('TradingDate','TradingTime','TradingPeriod','Node')) %>% mutate(Flag = ifelse(Sce1_price < Sce2_price, 1, 0))
sum(df_sce1_sce2$Flag,na.rm = T)
df_sce1_sce2 <- df_sce1_HAY %>% merge(df_sce2_HAY, on = c('TradingDate','TradingTime','TradingPeriod','Node')) %>% mutate(Flag = ifelse(Sce2_price < Sce1_price, 1, 0))
sum(df_sce1_sce2$Flag,na.rm = T)
reconciled_load <- read.csv("Reconciled_offtake_by_POC_20230701_20240630.csv") %>%
transmute(TradingDate = as.Date(TradingDate,'%Y-%m-%d'),
TradingPeriod = TradingPeriodNumber,
Node = PointOfConnectionCode, MWh)
DF <- reconciled_load %>%
inner_join(price_base, by = c('TradingDate','TradingPeriod','Node')) %>%
rename(Price_Base = Price) %>%
inner_join(price_sce1, by = c('TradingDate','TradingPeriod','TradingTime','Node')) %>%
rename(Price_Sce1 = Price) %>%
inner_join(price_sce2, by = c('TradingDate','TradingPeriod','TradingTime','Node')) %>%
rename(Price_Sce2 = Price)
DF1 <- DF %>% filter(!(is.na(MWh) |is.na(Price_Base) |
is.na(Price_Sce1) | is.na(Price_Sce2)
)
)
results <- DF1 %>% group_by(TradingDate,TradingPeriod) %>%
summarise(Demand_MWh = sum(MWh),
Cost_Base = sum(Price_Base * MWh),
Cost_Sce1 = sum(Price_Sce1 * MWh),
Cost_Sce2 = sum(Price_Sce2 * MWh)
) %>%
mutate(LWAP_Base = Cost_Base/ Demand_MWh,
LWAP_Sce1 = Cost_Sce1/ Demand_MWh,
LWAP_Sce2 = Cost_Sce2/ Demand_MWh
)
View(results)
View(DF1)
View(results)
results <- results %>% mutate(Flag2 = ifesle(LWAP_Sce2 < LWAP_Base,1,0), Flag1 = ifesle(LWAP_Sce1 < LWAP_Sce1,1,0))
results <- results %>% mutate(Flag2 = ifelse(LWAP_Sce2 < LWAP_Base,1,0), Flag1 = ifelse(LWAP_Sce1 < LWAP_Sce1,1,0))
sum(results$Flag2)
sum(results$Flag1)
results <- results %>% mutate(Flag2 = ifelse(LWAP_Sce2 < LWAP_Base,1,0), Flag1 = ifelse(LWAP_Sce2 < LWAP_Sce1,1,0))
sum(results$Flag1)
results <- results %>% mutate(Flag2 = ifelse(LWAP_Sce2 < LWAP_Base,1,0), Flag1 = ifelse(LWAP_Sce1 < LWAP_Sce2,1,0))
sum(results$Flag1)
sum(results$Flag2)
sum(results$Flag1)
results <- results %>% mutate(Flag2 = ifelse(LWAP_Sce2 < LWAP_Base,1,0), Flag1 = ifelse(LWAP_Sce2 < LWAP_Sce1,1,0))
sum(results$Flag1)
results <- results %>% mutate(Flag2 = ifelse(LWAP_Sce2 < LWAP_Base,1,0), Flag1 = ifelse(LWAP_Sce2 < LWAP_Sce1+0.01,1,0))
sum(results$Flag1)
results <- results %>% mutate(Flag2 = ifelse(LWAP_Sce2 < LWAP_Base,1,0), Flag1 = ifelse(LWAP_Sce2 < LWAP_Sce1+1,1,0))
sum(results$Flag1)
results <- results %>% mutate(Flag2 = ifelse(LWAP_Sce2 < LWAP_Base,1,0), Flag1 = ifelse(LWAP_Sce2 < LWAP_Sce1-1,1,0))
sum(results$Flag1)
results <- results %>% mutate(Flag2 = ifelse(LWAP_Sce2 < LWAP_Base-0.01,1,0), Flag1 = ifelse(LWAP_Sce1 < LWAP_Sce2-0.01,1,0))
sum(results$Flag1)
sum(results$Flag2)
sum(results$Flag2)/17520
sum(results$Flag1)/17520
results <- results %>% mutate(Flag2 = ifelse(LWAP_Sce2 < LWAP_Base-1,1,0), Flag1 = ifelse(LWAP_Sce1 < LWAP_Sce2-0.01,1,0))
sum(results$Flag2)
source("C:/GitHub/2025_Electricity_Allocation_Factor/vSPD_monthly_counter2.R")
source("C:/GitHub/2025_Electricity_Allocation_Factor/vSPD_monthly_counter2.R")
